<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cron的使用</title>
    <url>/2020/12/04/Cron%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML笔记（1）</title>
    <url>/2021/01/01/HTML%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<p>（1）</p>
<p>网页为啥叫HTML</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>像这种用标签标记的文字是不会显示在网页上的，每个标签有自己的含义。它们的作用已经超过了普通文本的含义，所以称为超级文本 HyperText。它们全部用标记语言来书写，所以称为超文本标记语言（HyperText Markup Language）也就是 HTML。</p>
<p>（2）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;!DOCTYPE html&gt;</code> 这个标签的意思就是告诉浏览器，请使用 HTML5 的标准来解析网页。</p>
<p><code>&lt;head&gt;&lt;/head&gt;</code> 是网页的头部，包含对网页信息的整体说明。</p>
<p><code>&lt;body&gt;&lt;/body&gt;</code> 是网页的主题，网页的主要内容都呈现在这里。</p>
<p>（3）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;这是一段文字&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h2&gt;这是一段文字&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h3&gt;这是一段文字&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h4&gt;这是一段文字&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h5&gt;这是一段文字&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h6&gt;这是一段文字&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure>

<p><code>h1</code> 到 <code>h6</code> 都是标题标签，<code>h1</code> 字体最大，<code>h6</code> 字体最小。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;i&gt;2021.1.1&lt;&#x2F;i&gt;</span><br><span class="line">&lt;hr&#x2F;&gt;</span><br><span class="line">&lt;b&gt;加粗文字&lt;&#x2F;b&gt;</span><br><span class="line">&lt;p&gt;这是一段&lt;br&gt;文字&amp;nbsp;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;这是一段文字&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p><code>i</code> 代表斜体效果。</p>
<p><code>hr</code> 代表分割线。</p>
<p><code>b</code> 代表加粗。</p>
<p><code>p</code> 是段落标签，并且独占一行。</p>
<p><code>br</code> 代表换行。</p>
<p><code>&amp;nbsp;</code> 代表空格，浏览器不会识别源代码中的多个空格，如果有多个空格，也视为一个空格。</p>
<p>（4）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.lvzitao.com&quot;&gt;点我吧&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p><code>a</code> 是超链接标签，<code>href</code> 属性表示需要跳转的地址，标签内的内容是显示到网页上的文字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;img&#x2F;logo.jpg&quot; alt&#x3D;&quot;失败&quot; title&#x3D;&quot;提示&quot; width&#x3D;&quot;100px&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p><code>img</code> 是图片标签，<code>src</code> 属性填写的是图片的地址，当前图片不能正常加载的时候，网页上会展示 <code>alt</code> 属性的值。鼠标划到图片上会展示 <code>title</code> 属性的值。</p>
<p>多个图片展示的时候，浏览器默认从左向右平铺，并且多个图片底部对齐展示，当一行宽度不够时进行换行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;项目1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目2&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目3&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;项目1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目2&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目3&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure>

<p><code>ul</code> 和 <code>li</code> 是无序列表。</p>
<p><code>ol</code> 和 <code>li</code> 是有序列表。</p>
<p>（5）</p>
<p>使用 <code>PS</code> 进行切图。</p>
<p>鼠标长按切图图标，然后选择切片工具。用鼠标框出需要切的图片。按住 <code>ctrl + shift + alt + s</code> 键，选择 <code>PNG-24</code>，勾选透明度，最后点击存储。</p>
<p>（6）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.lvzitao.com&quot; target&#x3D;&quot;_blank&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>使用超链接 <code>a</code> 标签时，如果希望在新窗口打开页面，可以使用 <code>target=&quot;_blank&quot; </code> 属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul type&#x3D;&quot;disc&quot;&gt;</span><br><span class="line">    &lt;li&gt;项目1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目2&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目3&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;ul type&#x3D;&quot;circle&quot;&gt;</span><br><span class="line">    &lt;li&gt;项目1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目2&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目3&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;ul type&#x3D;&quot;square&quot;&gt;</span><br><span class="line">    &lt;li&gt;项目1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目2&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目3&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<p>无序列表的样式有三种，可以通过 <code>type</code> 属性修改。<code>type=&quot;disc&quot;</code> 代表实心圆，<code>type=&quot;circle&quot;</code> 代表空心圆，<code>type=&quot;square&quot;</code> 代表方形。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ol type&#x3D;&quot;1&quot;&gt;</span><br><span class="line">    &lt;li&gt;项目1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目2&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目3&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br><span class="line">&lt;ol type&#x3D;&quot;a&quot;&gt;</span><br><span class="line">    &lt;li&gt;项目1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目2&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目3&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br><span class="line">&lt;ol type&#x3D;&quot;A&quot;&gt;</span><br><span class="line">    &lt;li&gt;项目1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目2&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目3&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br><span class="line">&lt;ol type&#x3D;&quot;i&quot;&gt;</span><br><span class="line">    &lt;li&gt;项目1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目2&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目3&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br><span class="line">&lt;ol type&#x3D;&quot;I&quot;&gt;</span><br><span class="line">    &lt;li&gt;项目1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目2&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;项目3&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure>

<p>同样可以通过 <code>type</code> 属性来修改有序列表的样式。<code>type=&quot;1&quot;</code> 使用数字排序，<code>type=&quot;a&quot;</code> 使用小写字母排序，<code>type=&quot;A&quot;</code> 使用大写字母排序，<code>type=&quot;i&quot;</code> 使用小写罗马字母排序，<code>type=&quot;I&quot;</code> 使用大写罗马字母排序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;del&gt;&lt;&#x2F;del&gt;</span><br><span class="line">2&lt;sup&gt;2&lt;&#x2F;sup&gt; &#x3D; 4</span><br><span class="line">&lt;u&gt;&lt;&#x2F;u&gt;</span><br><span class="line">&lt;center&gt;&lt;&#x2F;center&gt;</span><br></pre></td></tr></table></figure>

<p><code>del</code> 标签增加删除线。</p>
<p><code>sup</code> 标签可以让文字变为上标，数学公式常用。</p>
<p><code>u</code> 标签给文字增加下划线。</p>
<p><code>center</code> 标签可以让文字居中。</p>
]]></content>
      <tags>
        <tag>计算机</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML笔记（2）</title>
    <url>/2021/01/14/HTML%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<p>（1）</p>
<p>绝对路径和相对路径</p>
<p>绝对路径就是文件在系统硬盘中真正的路径。</p>
<p>相对路径就是相对与目标文件所在的路径。</p>
<p>（2）</p>
<p>简单表格制作</p>
]]></content>
      <tags>
        <tag>计算机</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM内存结构学习</title>
    <url>/2020/12/04/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>JVM 的内存结构的组成有堆（线程共享）、虚拟机栈（线程独享）、本地方法栈（线程独享）、程序计数器（线程独享）、方法栈（线程共享）。</p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>JDK1.8 之前堆内存分为新生代、老年代（Tenured）和持久代（Perm Gen）。</p>
<p>JDK1.8 之后堆内存分为新生代、老年代和元空间（本地内存 Metaspace），持久代被废弃了。</p>
<p>堆分为新生代和老年代，新生代分为伊甸园（Eden）和存活区（Survivor），存活区又分为 From Survivor 和 To Survivor。</p>
<h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>虚拟机栈是线程独享的，当创建一个线程的时候，就会创建一个虚拟机栈。</p>
<p>每一次的方法调用，都会创建一个栈针。每调用一个方法，就会往栈针内压入一个元素，当方法返回的时候，则会弹出一个元素。</p>
<p>栈针里面存放的数据有局部变量表、操作数栈、指向运行时常量池的引用、方法返回地址、动态链接。</p>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>虚拟机栈管理 Java 方法，本地方法栈管理的是 native 方法。Java 中的 native 方法都是 C 语言实现的。</p>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器用来记录各个线程执行的字节码的地址。比如分支、循环、跳转、异常和线程恢复等操作都需要依赖程序计数器。</p>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>JDK8 以后的方法区包含类信息、运行时常量池、字符串常量池和静态变量。方法区的主要作用是用来存放虚拟机加载的类的信息。</p>
<p><strong>静态常量池</strong>也叫 class 文件常量池，主要存放字面量（例如文本字符串、final 修饰的常量）和符号引用（例如类和接口的全限定名、字段的名称和描述符、方法的名称和描述符）。</p>
<p><strong>运行时常量池</strong>，当类加载到内存中后，JVM 就会将静态常量池中的内容存放到运行时常量池中；运行时常量池里面存储的主要是编译期间生成的字面量、符号引用等。</p>
<p><strong>字符串常量池</strong>，可以理解成运行时常量池分出来的一部分，当类加载到内存的时候，字符串会存到字符串常量池中。</p>
]]></content>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>Please make sure you have the correct access rights</title>
    <url>/2020/12/28/Please-make-sure-you-have-the-correct-access-rights/</url>
    <content><![CDATA[<p>我想在 <code>gitlab</code> 上创建一个项目，然后我却发现自己没办法将本地的项目 <code>push</code> 到远程仓库。</p>
<p><img src="https://blog-to-use.oss-cn-beijing.aliyuncs.com/202012/gitlab1.png"></p>
<p>我使用的是下图的方法，将已经存在的项目推送到远程仓库。</p>
<p><img src="https://blog-to-use.oss-cn-beijing.aliyuncs.com/202012/gitlab2.png"></p>
<p><img src="https://blog-to-use.oss-cn-beijing.aliyuncs.com/202012/gitlab3.png"></p>
<p>这里并不是我的 id_rsa.pub key 没有配置到 <code>gitlab</code> 上。我的其他项目是可以正常 <code>pull</code> 的。所以，我想到了一种曲线救国的方法。</p>
<p>就是让另一个用户创建项目，然后把项目权限分配给我。这样我就可以将本地仓库的代码 <code>push</code> 到远程仓库了。</p>
<p>添加权限的界面如下。</p>
<p><img src="https://blog-to-use.oss-cn-beijing.aliyuncs.com/202012/gitlab4.png"></p>
<p>最后显示执行成功。</p>
<p><img src="https://blog-to-use.oss-cn-beijing.aliyuncs.com/202012/gitlab5.png"></p>
]]></content>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode快捷键</title>
    <url>/2021/01/01/VSCode%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>记录一些自己常用 VSCode 快捷键。</p>
<table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Shift + option + f</td>
<td align="left">格式化代码</td>
</tr>
<tr>
<td align="left">Command + d</td>
<td align="left">向下复制一行代码</td>
</tr>
<tr>
<td align="left">Command + shift + 上/下</td>
<td align="left">上下移动一行代码</td>
</tr>
<tr>
<td align="left">Command + shift + p</td>
<td align="left">万能键</td>
</tr>
<tr>
<td align="left">Command + p</td>
<td align="left">按照名称搜索文件</td>
</tr>
<tr>
<td align="left">Command + y</td>
<td align="left">删除行</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>计算机</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>图片太大，浏览器出现滚动条怎么办</title>
    <url>/2020/12/12/%E5%9B%BE%E7%89%87%E5%A4%AA%E5%A4%A7%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    <content><![CDATA[<p>引用的图片太大，导致浏览器横向和纵向都出现滚动条。</p>
<p><img src="https://blog-to-use.oss-cn-beijing.aliyuncs.com/202012/gundontiao.png"></p>
<p>解决这一办法，可以添加这样的样式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        img&#123;</span><br><span class="line">            display: block;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;images&#x2F;baidu_title.png&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>效果如下。</p>
<p><img src="https://blog-to-use.oss-cn-beijing.aliyuncs.com/202012/wugundongtiao.png"></p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>工具人：SourceTree也可以这样用</title>
    <url>/2020/12/11/%E5%B7%A5%E5%85%B7%E4%BA%BA%EF%BC%9ASourceTree%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%BF%99%E6%A0%B7%E7%94%A8/</url>
    <content><![CDATA[<p>在团队开发过程中，版本控制是非常重要的。除了开发工具中的自带的版本控制我们也可以使用像 SourceTree 这样的版本控制工具。但是 SourceTree 是需要付费的，目前 Mac 系统的 SourceTree 有一个小 bug，可以让我们跳过登录。</p>
<p>打开 SourceTree 工具，然后点击顶部窗口按钮。</p>
<p><img src="https://blog-to-use.oss-cn-beijing.aliyuncs.com/202012/sourceTree02.png"></p>
<p>点击<strong>显示托管在远端的仓库</strong>，右侧弹出 SourceTree 管理面板。</p>
<p><img src="https://blog-to-use.oss-cn-beijing.aliyuncs.com/202012/sourceTree03.png"></p>
<p>点击左侧 <strong>X</strong> 号，然后点击 <em>Quit</em> 按钮。</p>
<p><img src="https://blog-to-use.oss-cn-beijing.aliyuncs.com/202012/sourceTree04.png"></p>
<p>点击确定按钮，至此，就已经跳过登录界面了。</p>
<p><img src="https://blog-to-use.oss-cn-beijing.aliyuncs.com/202012/sourceTree05.png"></p>
<p><img src="https://blog-to-use.oss-cn-beijing.aliyuncs.com/202012/sourceTree06.png"></p>
]]></content>
      <tags>
        <tag>工具人</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式笔记</title>
    <url>/2020/12/25/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><code>+</code> 代表前面的字符至少出现一次，比如 <code>regula+r</code> 表达式，符合的字符串有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regular</span><br><span class="line">regulaaaar</span><br><span class="line">regulaaaaaaaaar</span><br></pre></td></tr></table></figure>

<p><code>*</code> 代表前面的字符可以不出现，也可以出现一次或多次</p>
]]></content>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>类加载过程学习</title>
    <url>/2020/12/04/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><img src="https://blog-to-use.oss-cn-beijing.aliyuncs.com/202012/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png"></p>
<h2 id="编译与反编译"><a href="#编译与反编译" class="headerlink" title="编译与反编译"></a>编译与反编译</h2><p>可以通过 JDK 内置命令将 <code>.java</code> 文件编译成 <code>.class</code> 文件。进入到文件对应目录，然后输入下面命令。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac JVMExample1.java</span><br></pre></td></tr></table></figure>

<p><code>.class</code> 文件是没办法看懂的，可以通过 <code>javap</code> 命令将 <code>.class</code> 反编译。下面命令将 <code>.class</code> 反编译同时导出到 <code>2.txt</code> 文件中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javap -v -p JVMExample1 &gt; 2.txt</span><br></pre></td></tr></table></figure>

<p><code>javap</code> 参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:jvm lvtao0420$ javap --help</span><br><span class="line">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -? -h --help -help               输出此帮助消息</span><br><span class="line">  -version                         版本信息</span><br><span class="line">  -v  -verbose                     输出附加信息</span><br><span class="line">  -l                               输出行号和本地变量表</span><br><span class="line">  -public                          仅显示公共类和成员</span><br><span class="line">  -protected                       显示受保护的&#x2F;公共类和成员</span><br><span class="line">  -package                         显示程序包&#x2F;受保护的&#x2F;公共类</span><br><span class="line">                                   和成员 (默认)</span><br><span class="line">  -p  -private                     显示所有类和成员</span><br><span class="line">  -c                               对代码进行反汇编</span><br><span class="line">  -s                               输出内部类型签名</span><br><span class="line">  -sysinfo                         显示正在处理的类的</span><br><span class="line">                                   系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class="line">  -constants                       显示最终常量</span><br><span class="line">  --module &lt;模块&gt;, -m &lt;模块&gt;       指定包含要反汇编的类的模块</span><br><span class="line">  --module-path &lt;路径&gt;             指定查找应用程序模块的位置</span><br><span class="line">  --system &lt;jdk&gt;                   指定查找系统模块的位置</span><br><span class="line">  --class-path &lt;路径&gt;              指定查找用户类文件的位置</span><br><span class="line">  -classpath &lt;路径&gt;                指定查找用户类文件的位置</span><br><span class="line">  -cp &lt;路径&gt;                       指定查找用户类文件的位置</span><br><span class="line">  -bootclasspath &lt;路径&gt;            覆盖引导类文件的位置</span><br></pre></td></tr></table></figure>



<p>这是 <code>2.txt</code>的文件内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Classfile &#x2F;Users&#x2F;lvtao0420&#x2F;openSource&#x2F;project&#x2F;myself&#x2F;code-note&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;lvzitao&#x2F;code&#x2F;jvm&#x2F;JVMExample1.class</span><br><span class="line">&#x2F;&#x2F; 描述信息</span><br><span class="line">  Last modified 2020年12月4日; size 406 bytes</span><br><span class="line">  MD5 checksum 2e03b2a0b1b373aa701df2e2724a59aa</span><br><span class="line">  Compiled from &quot;JVMExample1.java&quot;</span><br><span class="line">&#x2F;&#x2F; 描述信息，当前类是通过哪个版本的 JDK 进行编译的，55代表 JDK11</span><br><span class="line">public class com.lvzitao.code.jvm.JVMExample1</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 55</span><br><span class="line">  flags: (0x0021) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #6                          &#x2F;&#x2F; com&#x2F;lvzitao&#x2F;code&#x2F;jvm&#x2F;JVMExample1</span><br><span class="line">  super_class: #7                         &#x2F;&#x2F; java&#x2F;lang&#x2F;Object</span><br><span class="line">  interfaces: 0, fields: 0, methods: 2, attributes: 1</span><br><span class="line">&#x2F;&#x2F; 常量池  </span><br><span class="line">Constant pool:</span><br><span class="line">   #1 &#x3D; Methodref          #7.#16         &#x2F;&#x2F; java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 &#x3D; Class              #17            &#x2F;&#x2F; com&#x2F;lvzitao&#x2F;code&#x2F;jvm&#x2F;Demo</span><br><span class="line">   #3 &#x3D; String             #18            &#x2F;&#x2F; aaa</span><br><span class="line">   #4 &#x3D; Methodref          #2.#19         &#x2F;&#x2F; com&#x2F;lvzitao&#x2F;code&#x2F;jvm&#x2F;Demo.&quot;&lt;init&gt;&quot;:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">   #5 &#x3D; Methodref          #2.#20         &#x2F;&#x2F; com&#x2F;lvzitao&#x2F;code&#x2F;jvm&#x2F;Demo.printName:()V</span><br><span class="line">   #6 &#x3D; Class              #21            &#x2F;&#x2F; com&#x2F;lvzitao&#x2F;code&#x2F;jvm&#x2F;JVMExample1</span><br><span class="line">   #7 &#x3D; Class              #22            &#x2F;&#x2F; java&#x2F;lang&#x2F;Object</span><br><span class="line">   #8 &#x3D; Utf8               &lt;init&gt;</span><br><span class="line">   #9 &#x3D; Utf8               ()V</span><br><span class="line">  #10 &#x3D; Utf8               Code</span><br><span class="line">  #11 &#x3D; Utf8               LineNumberTable</span><br><span class="line">  #12 &#x3D; Utf8               main</span><br><span class="line">  #13 &#x3D; Utf8               ([Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">  #14 &#x3D; Utf8               SourceFile</span><br><span class="line">  #15 &#x3D; Utf8               JVMExample1.java</span><br><span class="line">  #16 &#x3D; NameAndType        #8:#9          &#x2F;&#x2F; &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #17 &#x3D; Utf8               com&#x2F;lvzitao&#x2F;code&#x2F;jvm&#x2F;Demo</span><br><span class="line">  #18 &#x3D; Utf8               aaa</span><br><span class="line">  #19 &#x3D; NameAndType        #8:#23         &#x2F;&#x2F; &quot;&lt;init&gt;&quot;:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">  #20 &#x3D; NameAndType        #24:#9         &#x2F;&#x2F; printName:()V</span><br><span class="line">  #21 &#x3D; Utf8               com&#x2F;lvzitao&#x2F;code&#x2F;jvm&#x2F;JVMExample1</span><br><span class="line">  #22 &#x3D; Utf8               java&#x2F;lang&#x2F;Object</span><br><span class="line">  #23 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">  #24 &#x3D; Utf8               printName</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; 方法信息</span><br><span class="line">  public com.lvzitao.code.jvm.JVMExample1();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack&#x3D;1, locals&#x3D;1, args_size&#x3D;1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 9: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack&#x3D;3, locals&#x3D;2, args_size&#x3D;1</span><br><span class="line">         0: new           #2                  &#x2F;&#x2F; class com&#x2F;lvzitao&#x2F;code&#x2F;jvm&#x2F;Demo</span><br><span class="line">         3: dup</span><br><span class="line">         4: ldc           #3                  &#x2F;&#x2F; String aaa</span><br><span class="line">         6: invokespecial #4                  &#x2F;&#x2F; Method com&#x2F;lvzitao&#x2F;code&#x2F;jvm&#x2F;Demo.&quot;&lt;init&gt;&quot;:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">         9: astore_1</span><br><span class="line">        10: aload_1</span><br><span class="line">        11: invokevirtual #5                  &#x2F;&#x2F; Method com&#x2F;lvzitao&#x2F;code&#x2F;jvm&#x2F;Demo.printName:()V</span><br><span class="line">        14: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 12: 0</span><br><span class="line">        line 13: 10</span><br><span class="line">        line 14: 14</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;JVMExample1.java&quot;</span><br></pre></td></tr></table></figure>

<p>反编译后文件中的命令可以通过这个链接进行查阅：<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html">JDK8指令参考文档地址</a></p>
<h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>如果引用到的类没有加载过的话，类加载器会把当前类加载到内存中。加载过程中主要做了三件事。</p>
<ul>
<li>读取类的二进制流</li>
<li>转为方法区数据结构，并存放到方法区</li>
<li>在 Java 堆中产生一个 <code>java.lang.Class</code> 对象</li>
</ul>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>验证步骤主要是验证 <code>class</code> 文件是否符合规范。</p>
<p>验证的第一个层面，比如文件的验证格式，是否以 <code>0xCAFEBABE</code> 开头；版本号是否合理。</p>
<p>验证的第二个层面，是元数据的验证。比如验证是否有父类；是否继承了 <code>final</code> 类；非抽象类实现了所有抽象方法。</p>
<p>验证的第三个层面，是字节码的验证。比如运行检查；栈数据类型和操作码操作参数吻合；跳转指令指向合理位置。</p>
<p>验证的第四个层面，是符号引用验证。比如常量池中描述类是否存在；访问的方法或字段是否存在且有足够的权限。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备环节的作用，为类的静态变量分配内存，初始化为系统的初始值。</p>
<p>比如 <code>value</code> 字段在这个阶段会直接赋值为 <code>111</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private final static int value &#x3D; 111;</span><br></pre></td></tr></table></figure>

<p><code>value1</code> 字段在这个阶段没有赋值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static int value1 &#x3D; 111;</span><br></pre></td></tr></table></figure>

<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>解析的作用，将符号引用转换为直接引用。</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>执行 <code>class init</code> 方法。</p>
<p>特性一，<code>class init</code> 方法由编译器自动收集类里面的所有静态变量的赋值动作及静态语句块合并而成，也叫类构造器方法。</p>
<p><code>class init</code> 会把这两个方法合并。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static int i &#x3D; 0;</span><br><span class="line">static &#123;</span><br><span class="line">    i &#x3D; 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特性二，子类的 <code>class init</code> 方法调用前会先调用父类的 <code>class init</code> 方法。</p>
<p>特性三，<code>JVM</code> 会保证 <code>class init</code> 方法的线程安全性。</p>
<p>看一个执行顺序的例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class JVMExample2 &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;example2 静态块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;example2 构造块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public JVMExample2() &#123;</span><br><span class="line">        System.out.println(&quot;example2 构造方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;main&quot;);</span><br><span class="line">        new JVMExample2()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">example2 静态块</span><br><span class="line">main</span><br><span class="line">example2 构造块</span><br><span class="line">example2 构造方法</span><br></pre></td></tr></table></figure>



<p>再来看一个例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class JVMExample3 &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;JVMExample3 静态块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;JVMExample3 构造块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public JVMExample3() &#123;</span><br><span class="line">        System.out.println(&quot;JVMExample3 构造方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Sub();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Super &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;Super 静态块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;Super 构造块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Super() &#123;</span><br><span class="line">        System.out.println(&quot;Super 构造方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Sub extends Super &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;Sub 静态块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;Sub 构造块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Sub() &#123;</span><br><span class="line">        System.out.println(&quot;Sub 构造方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JVMExample3 静态块</span><br><span class="line">Super 静态块</span><br><span class="line">Sub 静态块</span><br><span class="line">Super 构造块</span><br><span class="line">Super 构造方法</span><br><span class="line">Sub 构造块</span><br><span class="line">Sub 构造方法</span><br></pre></td></tr></table></figure>

<p><code>JVMExample3</code> 的构造块和构造方法没有执行，因为代码里面没有 <code>new JVMExample3()</code>。</p>
<h2 id="使用和卸载"><a href="#使用和卸载" class="headerlink" title="使用和卸载"></a>使用和卸载</h2><p>类初始化完成后就可以使用了，使用完成后进行卸载。</p>
]]></content>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
</search>
